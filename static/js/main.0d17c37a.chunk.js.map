{"version":3,"sources":["../../src/constants.ts","../../src/index.tsx","App.js","index.js"],"names":["specialKeys","key","original","value","ShortcutKeySensor","actions","children","handleKeyDown","event","combinationKeys","pressedKey","specialKey","keyPressed","convertToStringPressedKeys","Object","matchWithPressedKey","useEffect","window","alert","App","ReactDOM","render","document","getElementById"],"mappings":"6PAAaA,EAAc,CACzB,CACEC,IADF,UAEEC,SAFF,UAGEC,MAAO,QAET,CACEF,IADF,SAEEC,SAFF,MAGEC,MAAO,OAET,CACEF,IADF,WAEEC,SAFF,QAGEC,MAAO,U,eCWaC,G,IAAoBC,YAASC,aAC7CC,EAAgB,SAACC,GACrB,IAAMC,EAfV,SAAoCD,GAClC,IAAME,EAAaV,EAAA,QACT,SAAAW,GAAU,OAAIH,EAAMG,EAAV,QADD,KAEZ,SAAAA,GAAU,OAAIA,EAAJ,SAEXC,EAAaJ,MAAnB,cAKA,OAJ4BR,EAAA,MAAiB,SAAAC,GAAG,OAAIA,aAAJ,MAExBS,OAAxB,GAEOA,OAAP,KAK0BG,CAAxB,GAC4BC,uCAA5B,IAIuBT,KAAvBU,IAQF,OANAC,qBAAU,WAER,OADAC,qCACO,WACLA,2CAHJD,IAMA,GCpCF,MAAMX,EAAU,CACd,SAAU,IAAMa,MAAM,qBACtB,eAAgB,IAAMA,MAAM,2BAC5B,UAAW,IAAMA,MAAM,sBACvB,EAAK,IAAMA,MAAM,iBAUJC,MARH,IAER,kBAAC,EAAD,CAAmBd,QAASA,GAC1B,0D,OCPNe,EAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0d17c37a.chunk.js","sourcesContent":["export const specialKeys = [\n  {\n    key: \"ctrlKey\",\n    original: \"CONTROL\",\n    value: \"CTRL\"\n  },\n  {\n    key: \"altKey\",\n    original: \"ALT\",\n    value: \"ALT\"\n  },\n  {\n    key: \"shiftKey\",\n    original: \"SHIFT\",\n    value: \"SHIFT\"\n  }\n];\n","import { useEffect } from 'react'\nimport { ShortcutProps } from './types';\nimport { specialKeys } from './constants'\n\n/**\n * This function convert pressed keys in formatted string.\n *\n * @param {Object} event - The event.\n *\n * @returns {string} Returns string formated.\n * E.g.: \"CTRL+A\"\n */\nfunction convertToStringPressedKeys(event: any) {\n  const pressedKey = specialKeys\n    .filter(specialKey => event[specialKey.key])\n    .map(specialKey => specialKey.value);\n\n  const keyPressed = event.key.toUpperCase();\n  const keyPressedIsSpecial = specialKeys.find(key => key.original === keyPressed);\n\n  !keyPressedIsSpecial && pressedKey.push(keyPressed);\n\n  return pressedKey.join(\"+\");\n};\n\nexport default function ShortcutKeySensor({ actions, children }: ShortcutProps) {\n  const handleKeyDown = (event: any) => {\n    const combinationKeys = convertToStringPressedKeys(event);\n    const matchWithPressedKey = Object.prototype.hasOwnProperty.call(\n      actions,\n      combinationKeys\n    );\n    matchWithPressedKey && actions[combinationKeys](event);\n  }\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    }\n  }, []);\n  return children;\n}\n","import React from 'react'\n\nimport ShortcutKeySensor from '@ontech/shortcut-key-sensor'\n\nconst actions = {\n  'CTRL+A': () => alert('Clicked in CTRL+A'),\n  'CTRL+SHIFT+A': () => alert('Clicked in CTRL+SHIFT+A'),\n  'SHIFT+A': () => alert('Clicked in SHIFT+A'),\n  'A': () => alert('Clicked in A'),\n}\nconst App = () => {\n  return (\n    <ShortcutKeySensor actions={actions}>\n      <h1>Example ShortcutKeySensor</h1>\n    </ShortcutKeySensor>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}